<project xmlns:ivy="antlib:org.apache.ivy.ant"
         name="hw3" default="jar">
    <description>
        build project with ant
    </description>

    <property name="ivy.install.version" value="2.1.0-rc2"/>
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME"/>
    </condition>
    <property name="ivy.home" value="${user.home}/.ant"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <property name="src" location="src/main"/>
    <property name="test" location="src/test"/>
    <property name="build" location="out"/>
    <property name="main.compiles" location="${build}/main"/>
    <property name="test.compiles" location="${build}/test"/>
    <property name="test.reports" location="${test.compiles}/reports"/>

    <path id="test.class.path">
        <pathelement location="${main.compiles}"/>
        <pathelement location="${test.compiles}"/>
        <pathelement location="${test}/resources"/>
    </path>

    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load ivy here from ivy home, in case the user has not already dropped
        it into ant's lib dir (note that the latter copy will always take precedence).
        We will not fail as long as local lib dir exists (it may be empty) and
        ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <!-- ivy start -->
    <target name="resolve" description="retrieve dependencies with ivy" depends="init-ivy">
        <echo message="Getting dependencies..." />
        <ivy:retrieve />

        <ivy:cachepath pathid="compile.path"/>
        <ivy:cachepath pathid="runtime.path"/>
        <ivy:cachepath pathid="test.path"/>

    </target>


    <target name="clean" description="clean up">
        <!-- Delete the ${build} directory tree -->
        <delete dir="${build}"/>
    </target>

    <target name="init" depends="clean">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${main.compiles}"/>
        <mkdir dir="${test.compiles}"/>
    </target>

    <target name="compile" depends="init, resolve" description="compile the source">
        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src}" destdir="${main.compiles}"/>
        <javac srcdir="${test}" destdir="${test.compiles}" classpathref="compile.path">
            <classpath refid="test.class.path"/>
        </javac>
    </target>

    <target name="test" depends="compile" description="run tests">
        <mkdir dir="${test.reports}"/>

        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="test.class.path"/>
            <classpath refid="test.path"/>

            <formatter type="plain"/>
            <formatter type="xml"/>

            <batchtest fork="yes" todir="${test.reports}">
                <fileset dir="${test.compiles}">
                    <include name="**/*Test*.java"/>
                </fileset>
            </batchtest>

        </junit>
    </target>

    <target name="jar" depends="test" description="generate the jar distribution">

        <jar jarfile="${build}/hw3-ant-${DSTAMP}.jar" basedir="${main.compiles}"/>
        <!--<manifest>-->
        <!--<attribute name="Main-Class" value="oata.HelloWorld"/>-->
        <!--</manifest>-->
    </target>

</project>
